Index: api/obj/Debug/net8.0/api.AssemblyInfo.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n\r\nusing System;\r\nusing System.Reflection;\r\n\r\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"api\")]\r\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\r\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\r\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+46fe1ed442040102de2bdc7652abe144adef3bd5\")]\r\n[assembly: System.Reflection.AssemblyProductAttribute(\"api\")]\r\n[assembly: System.Reflection.AssemblyTitleAttribute(\"api\")]\r\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\r\n\r\n// Generado por la clase WriteCodeFragment de MSBuild.\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/obj/Debug/net8.0/api.AssemblyInfo.cs b/api/obj/Debug/net8.0/api.AssemblyInfo.cs
--- a/api/obj/Debug/net8.0/api.AssemblyInfo.cs	(revision b543675fbcefe274e4d8a8a5ec17e1d4ea0cf192)
+++ b/api/obj/Debug/net8.0/api.AssemblyInfo.cs	(date 1730345528246)
@@ -13,7 +13,7 @@
 [assembly: System.Reflection.AssemblyCompanyAttribute("api")]
 [assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
 [assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
-[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+46fe1ed442040102de2bdc7652abe144adef3bd5")]
+[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b543675fbcefe274e4d8a8a5ec17e1d4ea0cf192")]
 [assembly: System.Reflection.AssemblyProductAttribute("api")]
 [assembly: System.Reflection.AssemblyTitleAttribute("api")]
 [assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
Index: api/obj/Debug/net8.0/api.sourcelink.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"documents\":{\"C:\\\\Code\\\\Personal\\\\AdminApp\\\\*\":\"https://raw.githubusercontent.com/JuanCruz21/AdminApp/46fe1ed442040102de2bdc7652abe144adef3bd5/*\"}}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/obj/Debug/net8.0/api.sourcelink.json b/api/obj/Debug/net8.0/api.sourcelink.json
--- a/api/obj/Debug/net8.0/api.sourcelink.json	(revision b543675fbcefe274e4d8a8a5ec17e1d4ea0cf192)
+++ b/api/obj/Debug/net8.0/api.sourcelink.json	(date 1730345528250)
@@ -1,1 +1,1 @@
-{"documents":{"C:\\Code\\Personal\\AdminApp\\*":"https://raw.githubusercontent.com/JuanCruz21/AdminApp/46fe1ed442040102de2bdc7652abe144adef3bd5/*"}}
\ No newline at end of file
+{"documents":{"C:\\Code\\Personal\\AdminApp\\*":"https://raw.githubusercontent.com/JuanCruz21/AdminApp/b543675fbcefe274e4d8a8a5ec17e1d4ea0cf192/*"}}
\ No newline at end of file
Index: api/bin/Debug/net8.0/appsettings.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"Logging\": {\r\n    \"LogLevel\": {\r\n      \"Default\": \"Information\",\r\n      \"Microsoft.AspNetCore\": \"Warning\"\r\n    }\r\n  },\r\n  \"AllowedHosts\": \"*\",\r\n  \"ConnectionStrings\": {\r\n    \"StoreConnections\": \r\n    \"Host=localhost:5432;Username=root;Password=123456;Database=AdminApp\"\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/bin/Debug/net8.0/appsettings.json b/api/bin/Debug/net8.0/appsettings.json
--- a/api/bin/Debug/net8.0/appsettings.json	(revision b543675fbcefe274e4d8a8a5ec17e1d4ea0cf192)
+++ b/api/bin/Debug/net8.0/appsettings.json	(date 1730345528244)
@@ -8,6 +8,12 @@
   "AllowedHosts": "*",
   "ConnectionStrings": {
     "StoreConnections": 
-    "Host=localhost:5432;Username=root;Password=123456;Database=AdminApp"
+    "Host=localhost:5432;Username=postgres;Password=123456;Database=AdminApp"
+  },
+  "Jwt": {
+    "Key": "EstaEsUnaLlaveMuySecretaParaJWT12345",
+    "Issuer": "api",
+    "Audience": "apiUsuarios",
+    "timer":1
   }
 }
Index: api/obj/api.csproj.nuget.g.props
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\r\n<Project ToolsVersion=\"14.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <RestoreSuccess Condition=\" '$(RestoreSuccess)' == '' \">True</RestoreSuccess>\r\n    <RestoreTool Condition=\" '$(RestoreTool)' == '' \">NuGet</RestoreTool>\r\n    <ProjectAssetsFile Condition=\" '$(ProjectAssetsFile)' == '' \">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>\r\n    <NuGetPackageRoot Condition=\" '$(NuGetPackageRoot)' == '' \">$(UserProfile)\\.nuget\\packages\\</NuGetPackageRoot>\r\n    <NuGetPackageFolders Condition=\" '$(NuGetPackageFolders)' == '' \">C:\\Users\\luisl\\.nuget\\packages\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages</NuGetPackageFolders>\r\n    <NuGetProjectStyle Condition=\" '$(NuGetProjectStyle)' == '' \">PackageReference</NuGetProjectStyle>\r\n    <NuGetToolVersion Condition=\" '$(NuGetToolVersion)' == '' \">6.9.1</NuGetToolVersion>\r\n  </PropertyGroup>\r\n  <ItemGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <SourceRoot Include=\"C:\\Users\\luisl\\.nuget\\packages\\\" />\r\n    <SourceRoot Include=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages\\\" />\r\n  </ItemGroup>\r\n  <ImportGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <Import Project=\"$(NuGetPackageRoot)microsoft.extensions.apidescription.server\\6.0.5\\build\\Microsoft.Extensions.ApiDescription.Server.props\" Condition=\"Exists('$(NuGetPackageRoot)microsoft.extensions.apidescription.server\\6.0.5\\build\\Microsoft.Extensions.ApiDescription.Server.props')\" />\r\n    <Import Project=\"$(NuGetPackageRoot)swashbuckle.aspnetcore\\6.6.2\\build\\Swashbuckle.AspNetCore.props\" Condition=\"Exists('$(NuGetPackageRoot)swashbuckle.aspnetcore\\6.6.2\\build\\Swashbuckle.AspNetCore.props')\" />\r\n    <Import Project=\"$(NuGetPackageRoot)microsoft.entityframeworkcore\\8.0.10\\buildTransitive\\net8.0\\Microsoft.EntityFrameworkCore.props\" Condition=\"Exists('$(NuGetPackageRoot)microsoft.entityframeworkcore\\8.0.10\\buildTransitive\\net8.0\\Microsoft.EntityFrameworkCore.props')\" />\r\n    <Import Project=\"$(NuGetPackageRoot)microsoft.entityframeworkcore.design\\8.0.0\\build\\net8.0\\Microsoft.EntityFrameworkCore.Design.props\" Condition=\"Exists('$(NuGetPackageRoot)microsoft.entityframeworkcore.design\\8.0.0\\build\\net8.0\\Microsoft.EntityFrameworkCore.Design.props')\" />\r\n  </ImportGroup>\r\n  <PropertyGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <PkgMicrosoft_Extensions_ApiDescription_Server Condition=\" '$(PkgMicrosoft_Extensions_ApiDescription_Server)' == '' \">C:\\Users\\luisl\\.nuget\\packages\\microsoft.extensions.apidescription.server\\6.0.5</PkgMicrosoft_Extensions_ApiDescription_Server>\r\n    <PkgMicrosoft_CodeAnalysis_Analyzers Condition=\" '$(PkgMicrosoft_CodeAnalysis_Analyzers)' == '' \">C:\\Users\\luisl\\.nuget\\packages\\microsoft.codeanalysis.analyzers\\3.3.3</PkgMicrosoft_CodeAnalysis_Analyzers>\r\n    <PkgMicrosoft_EntityFrameworkCore_Tools Condition=\" '$(PkgMicrosoft_EntityFrameworkCore_Tools)' == '' \">C:\\Users\\luisl\\.nuget\\packages\\microsoft.entityframeworkcore.tools\\8.0.0</PkgMicrosoft_EntityFrameworkCore_Tools>\r\n  </PropertyGroup>\r\n</Project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/obj/api.csproj.nuget.g.props b/api/obj/api.csproj.nuget.g.props
--- a/api/obj/api.csproj.nuget.g.props	(revision b543675fbcefe274e4d8a8a5ec17e1d4ea0cf192)
+++ b/api/obj/api.csproj.nuget.g.props	(date 1730345528253)
@@ -7,7 +7,7 @@
     <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
     <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\luisl\.nuget\packages\;C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages</NuGetPackageFolders>
     <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
-    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.9.1</NuGetToolVersion>
+    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.10.1</NuGetToolVersion>
   </PropertyGroup>
   <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
     <SourceRoot Include="C:\Users\luisl\.nuget\packages\" />
Index: api/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Text;\r\nusing api.Models;\r\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\r\nusing Microsoft.IdentityModel.Tokens;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.OpenApi.Models;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Configura la conexi√≥n a la base de datos\r\nbuilder.Services.AddDbContext<AdminContext>(options =>\r\n    options.UseNpgsql(builder.Configuration.GetConnectionString(\"StoreConnections\")));\r\n\r\n\r\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen(options =>\r\n{\r\n    options.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"API\", Version = \"v1\" });\r\n\r\n    // Agregar una opci√≥n para omitir autenticaci√≥n en Swagger\r\n    options.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme\r\n    {\r\n        Name = \"Authorization\",\r\n        Type = SecuritySchemeType.Http,\r\n        Scheme = \"bearer\",\r\n        BearerFormat = \"JWT\",\r\n        In = ParameterLocation.Header,\r\n        Description = \"Ingrese el token JWT en el formato: Bearer {token}\"\r\n    });\r\n\r\n    options.AddSecurityRequirement(new OpenApiSecurityRequirement\r\n    {\r\n        {\r\n            new OpenApiSecurityScheme\r\n            {\r\n                Reference = new OpenApiReference\r\n                {\r\n                    Type = ReferenceType.SecurityScheme,\r\n                    Id = \"Bearer\"\r\n                }\r\n            },\r\n            Array.Empty<string>()\r\n        }\r\n    });\r\n});\r\n\r\n\r\n//inyeccion de Contexto\r\nbuilder.Services.AddDbContext<AdminContext>(_ =>\r\n    _.UseNpgsql(builder.Configuration.GetConnectionString(\"StoreConection\")));\r\n// Configura la autenticaci√≥n con JWT\r\nbuilder.Services.AddAuthentication(options =>\r\n    {\r\n        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\r\n        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\r\n    })\r\n    .AddJwtBearer(options =>\r\n    {\r\n        options.TokenValidationParameters = new TokenValidationParameters\r\n        {\r\n            ValidateIssuer = true,\r\n            ValidateAudience = true,\r\n            ValidateLifetime = true,\r\n            ValidateIssuerSigningKey = true,\r\n            ValidIssuer = builder.Configuration[\"Jwt:Issuer\"],\r\n            ValidAudience = builder.Configuration[\"Jwt:Audience\"],\r\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration[\"Jwt:Key\"]))\r\n        };\r\n    });\r\n// Add services to the container.\r\nbuilder.Services.AddControllers();\r\n\r\nbuilder.Services.AddAuthorization(options =>\r\n{\r\n    // By default, all incoming requests will be authorized according to the default policy.\r\n    options.FallbackPolicy = options.DefaultPolicy;\r\n});\r\n\r\nvar app = builder.Build();\r\n\r\n\r\n// Configure the HTTP request pipeline.\r\nif (app.Environment.IsDevelopment())\r\n{\r\n    app.UseSwagger();\r\n    app.UseSwaggerUI();\r\n}\r\n\r\napp.UseAuthentication();\r\n\r\napp.UseHttpsRedirection();\r\n\r\napp.UseHttpsRedirection();\r\n\r\napp.UseAuthorization();\r\n\r\napp.MapControllers();\r\n\r\napp.Run();
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/Program.cs b/api/Program.cs
--- a/api/Program.cs	(revision b543675fbcefe274e4d8a8a5ec17e1d4ea0cf192)
+++ b/api/Program.cs	(date 1730345528240)
@@ -45,10 +45,6 @@
     });
 });
 
-
-//inyeccion de Contexto
-builder.Services.AddDbContext<AdminContext>(_ =>
-    _.UseNpgsql(builder.Configuration.GetConnectionString("StoreConection")));
 // Configura la autenticaci√≥n con JWT
 builder.Services.AddAuthentication(options =>
     {
Index: api/Controllers/ProductosController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using api.Core.Parametrizacion.ProductAggregate.Request;\r\nusing api.Core.Parametrizacion.ProductAggregate.Response;\r\nusing api.Models;\r\nusing api.Models.Parametrizacion;\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace api.Controllers\r\n{\r\n    [ApiController]\r\n    [Route(\"api/[controller]\")]\r\n    public class ProductosController : ControllerBase\r\n    {\r\n        private readonly AdminContext _context;\r\n\r\n        [HttpPost]\r\n        public async Task<IActionResult> CreateProducto([FromBody] CrearProducto spec)\r\n        {\r\n            if (!spec.ValidarProducto(out var errors))\r\n            {\r\n                return BadRequest(errors);\r\n            }\r\n\r\n            var producto = new Producto\r\n            {\r\n                Nombre = spec.Nombre!,\r\n                Descripcion = spec.Descripcion!,\r\n                Stock = (int)spec.Stock!,\r\n                Precio = (decimal)spec.Precio!\r\n            };\r\n\r\n            _context.Productos.Add(producto);\r\n            await _context.SaveChangesAsync();\r\n\r\n            return CreatedAtAction(nameof(GetProducto), new { id = producto.Id }, producto);\r\n        }\r\n\r\n        [HttpGet]\r\n        public async Task<IActionResult> GetProductos()\r\n        {\r\n            var productos = await _context.Productos\r\n                .Select(p => new ProductoDetallado(p.Id, p.Nombre, p.Descripcion, p.Precio, p.Stock))\r\n                .ToListAsync();\r\n\r\n            return Ok(productos);\r\n        }\r\n\r\n\r\n        [HttpGet(\"{id}\")]\r\n        public async Task<IActionResult> GetProducto(int id)\r\n        {\r\n            var producto = await _context.Productos\r\n                .Where(p => p.Id == id)\r\n                .Select(p => new ProductoDetallado(p.Id, p.Nombre, p.Descripcion, p.Precio, p.Stock))\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (producto == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            return Ok(producto);\r\n        }\r\n\r\n\r\n        [HttpPut(\"{id}\")]\r\n        public async Task<IActionResult> UpdateProducto([FromHeader] int? id, [FromBody] EditarProducto spec)\r\n        {\r\n            if (!id.HasValue)\r\n            {\r\n                return BadRequest(\"Debe indicar un identificado para editar.\");\r\n            }\r\n\r\n            if (!spec.ValidarProducto(out var errors))\r\n            {\r\n                return BadRequest(errors);\r\n            }\r\n\r\n            var product = _context.Productos.FirstOrDefault(p => p.Id == id);\r\n\r\n            if (product == null)\r\n            {\r\n                return BadRequest(\"No se encontro un producto con el identificador suministrado.\");\r\n            }\r\n\r\n            product.Nombre = spec.Nombre!;\r\n            product.Descripcion = spec.Descripcion!;\r\n            product.Precio = (decimal)spec.Precio!;\r\n\r\n            try\r\n            {\r\n                await _context.SaveChangesAsync();\r\n            }\r\n            catch (DbUpdateConcurrencyException)\r\n            {\r\n                if (!_context.Productos.Any(e => e.Id == id))\r\n                {\r\n                    return NotFound();\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                return BadRequest(ex.Message);\r\n            }\r\n\r\n            return NoContent();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/Controllers/ProductosController.cs b/api/Controllers/ProductosController.cs
--- a/api/Controllers/ProductosController.cs	(revision b543675fbcefe274e4d8a8a5ec17e1d4ea0cf192)
+++ b/api/Controllers/ProductosController.cs	(date 1730345528240)
@@ -2,109 +2,107 @@
 using api.Core.Parametrizacion.ProductAggregate.Response;
 using api.Models;
 using api.Models.Parametrizacion;
-using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
 using Microsoft.EntityFrameworkCore;
 
-namespace api.Controllers
-{
-    [ApiController]
-    [Route("api/[controller]")]
-    public class ProductosController : ControllerBase
-    {
-        private readonly AdminContext _context;
+namespace api.Controllers;
+
+[ApiController]
+[Route("api/[controller]")]
+public class ProductosController : ControllerBase
+{
+    private readonly AdminContext _context;
 
-        [HttpPost]
-        public async Task<IActionResult> CreateProducto([FromBody] CrearProducto spec)
-        {
-            if (!spec.ValidarProducto(out var errors))
-            {
-                return BadRequest(errors);
-            }
+    [HttpPost]
+    public async Task<IActionResult> CreateProducto([FromBody] CrearProducto spec)
+    {
+        if (!spec.ValidarProducto(out var errors))
+        {
+            return BadRequest(errors);
+        }
 
-            var producto = new Producto
-            {
-                Nombre = spec.Nombre!,
-                Descripcion = spec.Descripcion!,
-                Stock = (int)spec.Stock!,
-                Precio = (decimal)spec.Precio!
-            };
+        var producto = new Producto
+        {
+            Nombre = spec.Nombre!,
+            Descripcion = spec.Descripcion!,
+            Stock = (int)spec.Stock!,
+            Precio = (decimal)spec.Precio!
+        };
 
-            _context.Productos.Add(producto);
-            await _context.SaveChangesAsync();
+        _context.Productos.Add(producto);
+        await _context.SaveChangesAsync();
 
-            return CreatedAtAction(nameof(GetProducto), new { id = producto.Id }, producto);
-        }
+        return CreatedAtAction(nameof(GetProducto), new { id = producto.Id }, producto);
+    }
 
-        [HttpGet]
-        public async Task<IActionResult> GetProductos()
-        {
-            var productos = await _context.Productos
-                .Select(p => new ProductoDetallado(p.Id, p.Nombre, p.Descripcion, p.Precio, p.Stock))
-                .ToListAsync();
+    [HttpGet]
+    public async Task<IActionResult> GetProductos()
+    {
+        var productos = await _context.Productos
+            .Select(p => new ProductoDetallado(p.Id, p.Nombre, p.Descripcion, p.Precio, p.Stock))
+            .ToListAsync();
 
-            return Ok(productos);
-        }
+        return Ok(productos);
+    }
 
 
-        [HttpGet("{id}")]
-        public async Task<IActionResult> GetProducto(int id)
-        {
-            var producto = await _context.Productos
-                .Where(p => p.Id == id)
-                .Select(p => new ProductoDetallado(p.Id, p.Nombre, p.Descripcion, p.Precio, p.Stock))
-                .FirstOrDefaultAsync();
+    [HttpGet("{id}")]
+    public async Task<IActionResult> GetProducto(int id)
+    {
+        var producto = await _context.Productos
+            .Where(p => p.Id == id)
+            .Select(p => new ProductoDetallado(p.Id, p.Nombre, p.Descripcion, p.Precio, p.Stock))
+            .FirstOrDefaultAsync();
 
-            if (producto == null)
-            {
-                return NotFound();
-            }
+        if (producto == null)
+        {
+            return NotFound();
+        }
 
-            return Ok(producto);
-        }
+        return Ok(producto);
+    }
 
 
-        [HttpPut("{id}")]
-        public async Task<IActionResult> UpdateProducto([FromHeader] int? id, [FromBody] EditarProducto spec)
-        {
-            if (!id.HasValue)
-            {
-                return BadRequest("Debe indicar un identificado para editar.");
-            }
+    [HttpPut("{id}")]
+    public async Task<IActionResult> UpdateProducto([FromHeader] int? id, [FromBody] EditarProducto spec)
+    {
+        if (!id.HasValue)
+        {
+            return BadRequest("Debe indicar un identificado para editar.");
+        }
 
-            if (!spec.ValidarProducto(out var errors))
-            {
-                return BadRequest(errors);
-            }
+        if (!spec.ValidarProducto(out var errors))
+        {
+            return BadRequest(errors);
+        }
 
-            var product = _context.Productos.FirstOrDefault(p => p.Id == id);
+        var product = _context.Productos.FirstOrDefault(p => p.Id == id);
 
-            if (product == null)
-            {
-                return BadRequest("No se encontro un producto con el identificador suministrado.");
-            }
+        if (product == null)
+        {
+            return BadRequest("No se encontro un producto con el identificador suministrado.");
+        }
 
-            product.Nombre = spec.Nombre!;
-            product.Descripcion = spec.Descripcion!;
-            product.Precio = (decimal)spec.Precio!;
+        product.Nombre = spec.Nombre!;
+        product.Descripcion = spec.Descripcion!;
+        product.Precio = (decimal)spec.Precio!;
 
-            try
-            {
-                await _context.SaveChangesAsync();
-            }
-            catch (DbUpdateConcurrencyException)
-            {
-                if (!_context.Productos.Any(e => e.Id == id))
-                {
-                    return NotFound();
-                }
-            }
-            catch (Exception ex)
-            {
-                return BadRequest(ex.Message);
-            }
+        try
+        {
+            await _context.SaveChangesAsync();
+        }
+        catch (DbUpdateConcurrencyException)
+        {
+            if (!_context.Productos.Any(e => e.Id == id))
+            {
+                return NotFound();
+            }
+        }
+        catch (Exception ex)
+        {
+            return BadRequest(ex.Message);
+        }
 
-            return NoContent();
-        }
+        return NoContent();
     }
 }
\ No newline at end of file
Index: api/appsettings.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"Logging\": {\r\n    \"LogLevel\": {\r\n      \"Default\": \"Information\",\r\n      \"Microsoft.AspNetCore\": \"Warning\"\r\n    }\r\n  },\r\n  \"AllowedHosts\": \"*\",\r\n  \"ConnectionStrings\": {\r\n    \"StoreConnections\": \r\n    \"Host=localhost:5432;Username=root;Password=123456;Database=AdminApp\"\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/appsettings.json b/api/appsettings.json
--- a/api/appsettings.json	(revision b543675fbcefe274e4d8a8a5ec17e1d4ea0cf192)
+++ b/api/appsettings.json	(date 1730345528241)
@@ -8,6 +8,12 @@
   "AllowedHosts": "*",
   "ConnectionStrings": {
     "StoreConnections": 
-    "Host=localhost:5432;Username=root;Password=123456;Database=AdminApp"
+    "Host=localhost:5432;Username=postgres;Password=123456;Database=AdminApp"
+  },
+  "Jwt": {
+    "Key": "EstaEsUnaLlaveMuySecretaParaJWT12345",
+    "Issuer": "api",
+    "Audience": "apiUsuarios",
+    "timer":1
   }
 }
